str_remove("_all_thresh.tif")
for(i in 1:length(forest_list)){
intersect = raster::intersect(spec_rast, forest_list[[i]])
df = data.frame(forest_name = names(forest_list[i]),
species = species_name,
present = ifelse(sum(intersect@data@values) > 0, TRUE, FALSE))
df_out = rbind(df_out, df)
print(paste(species_name, names(forest_list[i])))
}
}
?intersect
# building a checklist for one species for all forests
forest_list = split(nfs, nfs$FORESTNAME, drop = TRUE)
# getting all species threshold file names
files = list.files("./data/thresh_maps_rasters/checklist_rasters/",
full.names = TRUE)
to_run = files[str_detect(files, "all")]
df_out = data.frame(forest_name = c(),
species = c(),
present = c())
for(j in 1:length(to_run)){
spec_rast = raster(to_run[j])
crs(spec_rast) = crs(nfs)
species_name = str_remove(to_run[j],
"./data/thresh_maps_rasters/checklist_rasters/") %>%
str_remove("_all_thresh.tif")
for(i in 1:length(forest_list)){
intersect = raster::intersect(forest_list[[i]], spec_rast)
df = data.frame(forest_name = names(forest_list[i]),
species = species_name,
present = ifelse(sum(intersect@data@values) > 0, TRUE, FALSE))
df_out = rbind(df_out, df)
print(paste(species_name, names(forest_list[i])))
}
}
# getting all species threshold file names
files = list.files("./data/thresh_maps_rasters/checklist_rasters/",
full.names = TRUE)
to_run = files[str_detect(files, "all")]
df_out = data.frame(forest_name = c(),
species = c(),
present = c())
for(j in 1:length(to_run)){
spec_rast = raster(to_run[j])
crs(spec_rast) = crs(nfs)
species_name = str_remove(to_run[j],
"./data/thresh_maps_rasters/checklist_rasters/") %>%
str_remove("_all_thresh.tif")
for(i in 1:length(forest_list)){
intersect = raster::intersect(spec_rast, forest_list[[i]])
df = data.frame(forest_name = names(forest_list[i]),
species = species_name,
present = ifelse(sum(intersect@data@values) > 0, TRUE, FALSE))
df_out = rbind(df_out, df)
print(paste(species_name, names(forest_list[i])))
}
}
# getting all species threshold file names
files = list.files("./data/thresh_maps_rasters/checklist_rasters/",
full.names = TRUE)
to_run = files[str_detect(files, "all")]
df_out = data.frame(forest_name = c(),
species = c(),
present = c())
for(j in 1:length(to_run)){
spec_rast = raster(to_run[j])
crs(spec_rast) = crs(nfs)
species_name = str_remove(to_run[j],
"./data/thresh_maps_rasters/checklist_rasters/") %>%
str_remove("_all_thresh.tif")
for(i in 1:length(forest_list)){
intersect = try(raster::intersect(spec_rast, forest_list[[i]]))
df = data.frame(forest_name = names(forest_list[i]),
species = species_name,
present = ifelse(sum(intersect@data@values) > 0, TRUE, FALSE))
df_out = rbind(df_out, df)
print(paste(species_name, names(forest_list[i])))
}
}
?try
extent(shoshone)
extent(test_rast)
extent(shoshone) = extent(test_rast)
test_rast
shoshone
extent = extent(shoshone)
extent(test_rast) = extent
extent(test_rast) == extent(shoshone)
# getting all species threshold file names
files = list.files("./data/thresh_maps_rasters/checklist_rasters/",
full.names = TRUE)
to_run = files[str_detect(files, "all")]
df_out = data.frame(forest_name = c(),
species = c(),
present = c())
for(j in 1:length(to_run)){
spec_rast = raster(to_run[j])
crs(spec_rast) = crs(nfs)
species_name = str_remove(to_run[j],
"./data/thresh_maps_rasters/checklist_rasters/") %>%
str_remove("_all_thresh.tif")
for(i in 1:length(forest_list)){
extent = extent(forest_list[i])
extent(spec_rast) = extent
intersect = try(raster::intersect(spec_rast, forest_list[[i]]))
df = data.frame(forest_name = names(forest_list[i]),
species = species_name,
present = ifelse(sum(intersect@data@values) > 0, TRUE, FALSE))
df_out = rbind(df_out, df)
print(paste(species_name, names(forest_list[i])))
}
}
extent(forest_list[i])
extent(forest_list[1])
extent(forest_list[[1]])
# building a checklist for one species for all forests
forest_list = split(nfs, nfs$FORESTNAME, drop = TRUE)
# getting all species threshold file names
files = list.files("./data/thresh_maps_rasters/checklist_rasters/",
full.names = TRUE)
to_run = files[str_detect(files, "all")]
df_out = data.frame(forest_name = c(),
species = c(),
present = c())
for(j in 1:length(to_run)){
spec_rast = raster(to_run[j])
crs(spec_rast) = crs(nfs)
species_name = str_remove(to_run[j],
"./data/thresh_maps_rasters/checklist_rasters/") %>%
str_remove("_all_thresh.tif")
for(i in 1:length(forest_list)){
extent = extent(forest_list[[i]])
extent(spec_rast) = extent
intersect = try(raster::intersect(spec_rast, forest_list[[i]]))
df = data.frame(forest_name = names(forest_list[i]),
species = species_name,
present = ifelse(sum(intersect@data@values) > 0, TRUE, FALSE))
df_out = rbind(df_out, df)
print(paste(species_name, names(forest_list[i])))
}
}
df_out
# getting all species threshold file names
files = list.files("./data/thresh_maps_rasters/checklist_rasters/",
full.names = TRUE)
to_run = files[str_detect(files, "all")]
df_out = data.frame(forest_name = c(),
species = c(),
present = c())
for(j in 1:length(to_run)){
spec_rast = raster(to_run[j])
crs(spec_rast) = crs(nfs)
species_name = str_remove(to_run[j],
"./data/thresh_maps_rasters/checklist_rasters/") %>%
str_remove("_all_thresh.tif")
for(i in 1:length(forest_list)){
extent = extent(spec_rast)
extent(forest_list[[i]]) = extent
intersect = try(raster::intersect(spec_rast, forest_list[[i]]))
df = data.frame(forest_name = names(forest_list[i]),
species = species_name,
present = ifelse(sum(intersect@data@values) > 0, TRUE, FALSE))
df_out = rbind(df_out, df)
print(paste(species_name, names(forest_list[i])))
}
}
extent(test_rast)
extent = extent(test_rast)
extent
extent(shoshone) = extent
shoshone@bbox = as.matrix(extent(test_rast))
extent(shoshone) == extent(test_rast)
# getting all species threshold file names
files = list.files("./data/thresh_maps_rasters/checklist_rasters/",
full.names = TRUE)
to_run = files[str_detect(files, "all")]
df_out = data.frame(forest_name = c(),
species = c(),
present = c())
for(j in 1:length(to_run)){
spec_rast = raster(to_run[j])
crs(spec_rast) = crs(nfs)
species_name = str_remove(to_run[j],
"./data/thresh_maps_rasters/checklist_rasters/") %>%
str_remove("_all_thresh.tif")
for(i in 1:length(forest_list)){
forest_list[[i]]@bbox = as.matrix(extent(spec_rast))
intersect = try(raster::intersect(spec_rast, forest_list[[i]]))
df = data.frame(forest_name = names(forest_list[i]),
species = species_name,
present = ifelse(sum(intersect@data@values) > 0, TRUE, FALSE))
df_out = rbind(df_out, df)
print(paste(species_name, names(forest_list[i])))
}
}
df_out
unique(df_out$present)
#test raster
test_rast = raster("./data/thresh_maps_rasters/checklist_rasters/aglais_milberti_all_thresh.tif")
# NFS polygons
nfs = readRDS("./data/nfs_small.rds")
#same proj
crs(test_rast) = crs(nfs)
# intersection
shoshone = subset(nfs, nfs$FORESTNAME == "Shoshone National Forest")
intersect = raster::intersect(test_rast, shoshone)
plot(intersect)
plot(test_rast)
# getting all species threshold file names
files = list.files("./data/thresh_maps_rasters/checklist_rasters/",
full.names = TRUE)
to_run = files[str_detect(files, "all")]
df_out = data.frame(forest_name = c(),
species = c(),
present = c())
for(j in 1:length(to_run)){
spec_rast = raster(to_run[j])
crs(spec_rast) = crs(nfs)
species_name = str_remove(to_run[j],
"./data/thresh_maps_rasters/checklist_rasters/") %>%
str_remove("_all_thresh.tif")
for(i in 1:length(forest_list)){
intersect = try(raster::intersect(spec_rast, forest_list[[i]]))
df = data.frame(forest_name = names(forest_list[i]),
species = species_name,
present = ifelse(sum(intersect@data@values) > 0, TRUE, FALSE))
df_out = rbind(df_out, df)
print(paste(species_name, names(forest_list[i])))
}
}
df_out
sum(df_out$present)
# intersection
shoshone = subset(nfs, nfs$FORESTNAME == "Angeles National Forest")
shoshone
plot(shoshone)
intersect = raster::intersect(test_rast, shoshone)
plot(intersect)
intersect@data@values
sum(intersect@data@values)
# intersection
angeles = subset(nfs, nfs$FORESTNAME == "Angeles National Forest")
intersect = raster::intersect(test_rast, angeles)
plot(intersect)
plot(angeles)
# building a checklist for one species for all forests
forest_list = split(nfs, nfs$FORESTNAME, drop = TRUE)
# getting all species threshold file names
files = list.files("./data/thresh_maps_rasters/checklist_rasters/",
full.names = TRUE)
to_run = files[str_detect(files, "all")]
df_out = data.frame(forest_name = c(),
species = c(),
present = c())
for(j in 1:length(to_run)){
spec_rast = raster(to_run[j])
crs(spec_rast) = crs(nfs)
species_name = str_remove(to_run[j],
"./data/thresh_maps_rasters/checklist_rasters/") %>%
str_remove("_all_thresh.tif")
for(i in 1:length(forest_list)){
check_intersect = try(raster::intersect(spec_rast, forest_list[[i]]))
df = data.frame(forest_name = names(forest_list[i]),
species = species_name,
present = ifelse(sum(check_intersect@data@values) > 0,
TRUE,
FALSE))
df_out = rbind(df_out, df)
print(paste(species_name, names(forest_list[i])))
}
}
# getting all species threshold file names
files = list.files("./data/thresh_maps_rasters/checklist_rasters/",
full.names = TRUE)
to_run = files[str_detect(files, "all")]
df_out = data.frame(forest_name = c(),
species = c(),
present = c())
for(j in 1:length(to_run)){
spec_rast = raster(to_run[j])
crs(spec_rast) = crs(nfs)
species_name = str_remove(to_run[j],
"./data/thresh_maps_rasters/checklist_rasters/") %>%
str_remove("_all_thresh.tif")
for(i in 1:length(forest_list)){
check_intersect = try(raster::intersect(spec_rast, forest_list[[i]]))
df = data.frame(forest_name = names(forest_list[i]),
species = species_name,
present = ifelse(check_intersect != "try-error",
ifelse(sum(check_intersect@data@values) > 0,
TRUE,
FALSE),
FALSE))
df_out = rbind(df_out, df)
print(paste(species_name, names(forest_list[i])))
}
}
# getting all species threshold file names
files = list.files("./data/thresh_maps_rasters/checklist_rasters/",
full.names = TRUE)
to_run = files[str_detect(files, "all")]
df_out = data.frame(forest_name = c(),
species = c(),
present = c())
for(j in 1:length(to_run)){
spec_rast = raster(to_run[j])
crs(spec_rast) = crs(nfs)
species_name = str_remove(to_run[j],
"./data/thresh_maps_rasters/checklist_rasters/") %>%
str_remove("_all_thresh.tif")
for(i in 1:length(forest_list)){
check_intersect = try(raster::intersect(spec_rast, forest_list[[i]]))
df = data.frame(forest_name = names(forest_list[i]),
species = species_name,
present = ifelse(check_intersect == "try-error",
FALSE,
ifelse(sum(check_intersect@data@values) > 0,
TRUE,
FALSE)))
df_out = rbind(df_out, df)
print(paste(species_name, names(forest_list[i])))
}
}
check_intersect
# getting all species threshold file names
files = list.files("./data/thresh_maps_rasters/checklist_rasters/",
full.names = TRUE)
to_run = files[str_detect(files, "all")]
df_out = data.frame(forest_name = c(),
species = c(),
present = c())
for(j in 1:length(to_run)){
spec_rast = raster(to_run[j])
crs(spec_rast) = crs(nfs)
species_name = str_remove(to_run[j],
"./data/thresh_maps_rasters/checklist_rasters/") %>%
str_remove("_all_thresh.tif")
for(i in 1:length(forest_list)){
check_intersect = try(raster::intersect(spec_rast, forest_list[[i]]))
df = data.frame(forest_name = names(forest_list[i]),
species = species_name,
present = ifelse(class(check_intersect) == "try-error",
FALSE,
ifelse(sum(check_intersect@data@values) > 0,
TRUE,
FALSE)))
df_out = rbind(df_out, df)
print(paste(species_name, names(forest_list[i])))
}
}
df_out
write_csv(df_out, "checklist.csv")
shiny::runApp()
?renderDataTable
runApp()
runApp()
checklist
# Setting up data outside of ui and server
occ_data = read_csv("./data/species_obs.csv") %>%
mutate(provider = as.factor(provider))
unique_species = unique(occ_data$scientific_name)
checklist = read_csv("./checklist.csv") %>%
mutate(species = str_replace(species, "_", " ") %>% str_to_sentence())
checklist
# Checklist builder
# Keaton Wilson
# keatonwilson@me.com
# 2020-05-29
# packages
library(tidyverse)
library(raster)
library(rgeos)
#test raster
test_rast = raster("./data/thresh_maps_rasters/checklist_rasters/aglais_milberti_all_thresh.tif")
# NFS polygons
nfs = readRDS("./data/nfs_small.rds")
#same proj
crs(test_rast) = crs(nfs)
# intersection
angeles = subset(nfs, nfs$FORESTNAME == "Angeles National Forest")
intersect = raster::intersect(test_rast, angeles)
# building a checklist for one species for all forests
forest_list = split(nfs, nfs$FORESTNAME, drop = TRUE)
# getting all species threshold file names
files = list.files("./data/thresh_maps_rasters/checklist_rasters/",
full.names = TRUE)
to_run = files[str_detect(files, "all")]
df_out = data.frame(forest_name = c(),
species = c(),
present = c())
for(j in 1:length(to_run)){
spec_rast = raster(to_run[j])
crs(spec_rast) = crs(nfs)
species_name = str_remove(to_run[j],
"./data/thresh_maps_rasters/checklist_rasters//") %>%
str_remove("_all_thresh.tif")
for(i in 1:length(forest_list)){
check_intersect = try(raster::intersect(spec_rast, forest_list[[i]]))
df = data.frame(forest_name = names(forest_list[i]),
species = species_name,
present = ifelse(class(check_intersect) == "try-error",
FALSE,
ifelse(sum(check_intersect@data@values) > 0,
TRUE,
FALSE)))
df_out = rbind(df_out, df)
print(paste(species_name, names(forest_list[i])))
}
}
write_csv(df_out, "checklist.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
?leafletOutput
runApp()
library(maptools)
install.packages('maps')
library(maps)
states = st_as_sf(map("state", plot = FALSE, fill = TRUE))
library(sf)
states = st_as_sf(map("state", plot = FALSE, fill = TRUE))
states
centroids = states %>% st_centroid()
centroids
plot(states)
points(centroids)
centroids$geom
centroids
centroids = states %>% st_centroid() %>% st_sf()
centroids
centroids = states %>% st_centroid() %>% tidy()
centroids = states %>% st_centroid() %>% st_cast()
centroids
centroids = states %>% st_centroid() %>% st_coordinates()
centroids
centroids = states %>%
st_centroid()
centroids
centroids$ID
centroids = states %>%
st_centroid() %>%
st_coordinates() %>%
left_join(states %>% st_centroid()$ID)
library(tidyverse)
library(shiny)
library(leaflet)
library(tidyverse)
library(rgdal)
library(rmapshaper)
library(raster)
library(stringr)
library(shinythemes)
library(DT)
library(maptools)
library(maps)
library(sf)
centroids = states %>%
st_centroid() %>%
st_coordinates() %>%
left_join(states %>% st_centroid()$ID)
coords = st_coordinates(centroids)
state_id = centroids$ID
class(coords)
data.frame(st_coordinates(centroids))
coords = data.frame(st_coordinates(centroids)) %>%
rename(long = X, lat = Y)
class_state_id
class(state_id)
centroids_df = bind_cols(state = state_id, coords)
centroids_df
centroids_df = bind_cols(state = state_id, coords) %>%
str_to_sentence()
centroids_df = bind_cols(state = state_id, coords) %>%
str_to_sentence(state)
centroids_df = bind_cols(state = state_id, coords) %>%
str_to_sentence(state)
centroids_df = bind_cols(state = state_id, coords) %>%
mutate(state = str_to_sentence(state))
centroids_df
#species to focal state
spec_focal_state = read_csv("./data/species_state_mapping.csv")
spec_focal_state
centroids_df
?leaflet
?setView
runApp()
runApp()
runApp()
runApp()
states = st_as_sf(map("state", plot = FALSE, fill = TRUE))
?map
states = st_as_sf(maps::map("state", plot = FALSE, fill = TRUE))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?clusterOptions
?addMarkers
runApp()
?addCircleMarkers
runApp()
??gSimplify
